#!/bin/bash
# PHPSwitch Auto-switching Module
# Handles automatic PHP version switching based on directory

# Function for silent/quick PHP version switching for auto-switch
function auto_switch_php {
    local new_version="$1"
    local brew_version="$new_version"
    local current_version=$(core_get_current_php_version)
    
    # If versions are the same, no need to switch
    if [ "$current_version" = "$new_version" ]; then
        return 0
    fi
    
    # Only switch if the version is installed
    if ! core_check_php_installed "$new_version"; then
        core_debug_log "Auto-switch: Version $new_version not installed"
        return 1
    }
    
    core_debug_log "Auto-switching from $current_version to $new_version"
    
    # Handle default PHP
    if [ "$new_version" = "php@default" ]; then
        brew_version="php"
    fi
    
    # Unlink current PHP
    brew unlink "$current_version" &>/dev/null
    
    # Link new PHP
    brew link --force "$brew_version" &>/dev/null
    
    # Update PATH for current session
    shell_force_reload "$new_version" &>/dev/null
    
    return 0
}

# Function to install auto-switching capability
function auto_install {
    utils_show_status "info" "Setting up auto-switching for PHP versions..."
    
    # Enable auto-switching in config
    local config_file="$HOME/.phpswitch.conf"
    
    if [ -f "$config_file" ]; then
        # Update existing config
        if grep -q "AUTO_SWITCH_PHP_VERSION=" "$config_file"; then
            sed -i.bak "s/AUTO_SWITCH_PHP_VERSION=.*/AUTO_SWITCH_PHP_VERSION=true/" "$config_file"
        else
            echo "AUTO_SWITCH_PHP_VERSION=true" >> "$config_file"
        fi
    else
        # Create new config
        core_create_default_config
        sed -i.bak "s/AUTO_SWITCH_PHP_VERSION=.*/AUTO_SWITCH_PHP_VERSION=true/" "$config_file"
    fi
    
    # Detect shell and add appropriate hook
    local shell_type=$(shell_detect_shell)
    
    case "$shell_type" in
        "bash")
            auto_install_bash_hook
            ;;
        "zsh")
            auto_install_zsh_hook
            ;;
        "fish")
            auto_install_fish_hook
            ;;
        *)
            utils_show_status "error" "Unsupported shell: $shell_type"
            echo "Auto-switching is only supported for bash, zsh, and fish shells."
            return 1
            ;;
    esac
    
    utils_show_status "success" "Auto-switching has been enabled"
    echo "Close and reopen your terminal, or source your shell config file to activate."
}

# Function to install bash auto-switching
function auto_install_bash_hook {
    local bashrc="$HOME/.bashrc"
    
    # Create .bashrc if it doesn't exist
    if [ ! -f "$bashrc" ]; then
        touch "$bashrc"
    fi
    
    # Check if hooks are already installed
    if grep -q "phpswitch_auto_detect_project" "$bashrc"; then
        utils_show_status "info" "Auto-switching hooks already installed in .bashrc"
        return 0
    fi
    
    # Create a backup
    if [ "$BACKUP_CONFIG_FILES" = "true" ]; then
        local backup_file="${bashrc}.bak.$(date +%Y%m%d%H%M%S)"
        cp "$bashrc" "$backup_file"
        utils_show_status "info" "Created backup at ${backup_file}"
    fi
    
    # Add hooks to .bashrc
    cat >> "$bashrc" << 'EOL'

# PHPSwitch auto-switching hooks
function phpswitch_auto_detect_project() {
    if [ "$AUTO_SWITCH_PHP_VERSION" = "true" ]; then
        # Use a simple cache to avoid checking too frequently
        local dir_hash=$(echo "$(pwd)" | md5sum 2>/dev/null || md5 "$(pwd)" 2>/dev/null)
        dir_hash=$(echo "$dir_hash" | cut -d ' ' -f 1)
        local cache_dir="$HOME/.cache/phpswitch"
        local cache_file="$cache_dir/dir_${dir_hash}.cache"
        
        # Ensure cache directory exists
        mkdir -p "$cache_dir" 2>/dev/null
        
        # Check if we should process this directory
        if [ ! -f "$cache_file" ] || [ "$(cat "$cache_file" | wc -c)" -eq 0 ]; then
            phpswitch --auto-mode > /dev/null 2>&1
            # Cache the result
            echo "cached" > "$cache_file"
        fi
    fi
}

# Set up directory change hook
prompt_command_function() {
    # Store last exit status
    local EXIT="$?"
    
    # Run auto-detection
    phpswitch_auto_detect_project
    
    # Return original exit status
    return $EXIT
}

# Add to PROMPT_COMMAND if it doesn't exist
if [[ ! "$PROMPT_COMMAND" =~ prompt_command_function ]]; then
    PROMPT_COMMAND="prompt_command_function${PROMPT_COMMAND:+;$PROMPT_COMMAND}"
fi
EOL

    utils_show_status "success" "Installed auto-switching hooks in .bashrc"
}

# Function to install zsh auto-switching
function auto_install_zsh_hook {
    local zshrc="$HOME/.zshrc"
    
    # Create .zshrc if it doesn't exist
    if [ ! -f "$zshrc" ]; then
        touch "$zshrc"
    fi
    
    # Check if hooks are already installed
    if grep -q "phpswitch_auto_detect_project" "$zshrc"; then
        utils_show_status "info" "Auto-switching hooks already installed in .zshrc"
        return 0
    fi
    
    # Create a backup
    if [ "$BACKUP_CONFIG_FILES" = "true" ]; then
        local backup_file="${zshrc}.bak.$(date +%Y%m%d%H%M%S)"
        cp "$zshrc" "$backup_file"
        utils_show_status "info" "Created backup at ${backup_file}"
    fi
    
    # Add hooks to .zshrc
    cat >> "$zshrc" << 'EOL'

# PHPSwitch auto-switching hooks
function phpswitch_auto_detect_project() {
    if [ "$AUTO_SWITCH_PHP_VERSION" = "true" ]; then
        # Use a simple cache to avoid checking too frequently
        local dir_hash=$(echo "$(pwd)" | md5sum 2>/dev/null || md5 "$(pwd)" 2>/dev/null)
        dir_hash=$(echo "$dir_hash" | cut -d ' ' -f 1)
        local cache_dir="$HOME/.cache/phpswitch"
        local cache_file="$cache_dir/dir_${dir_hash}.cache"
        
        # Ensure cache directory exists
        mkdir -p "$cache_dir" 2>/dev/null
        
        # Check if we should process this directory
        if [ ! -f "$cache_file" ] || [ "$(cat "$cache_file" | wc -c)" -eq 0 ]; then
            phpswitch --auto-mode > /dev/null 2>&1
            # Cache the result
            echo "cached" > "$cache_file"
        fi
    fi
}

# Hook into Zsh's chpwd system
autoload -U add-zsh-hook
add-zsh-hook chpwd phpswitch_auto_detect_project
EOL

    utils_show_status "success" "Installed auto-switching hooks in .zshrc"
}

# Function to install fish auto-switching
function auto_install_fish_hook {
    local fish_config="$HOME/.config/fish/config.fish"
    local fish_functions="$HOME/.config/fish/functions"
    
    # Create config.fish and functions directory if they don't exist
    mkdir -p "$(dirname "$fish_config")" 2>/dev/null
    mkdir -p "$fish_functions" 2>/dev/null
    
    if [ ! -f "$fish_config" ]; then
        touch "$fish_config"
    fi
    
    # Check if hooks are already installed
    if grep -q "phpswitch_auto_detect_project" "$fish_config"; then
        utils_show_status "info" "Auto-switching hooks already installed in config.fish"
        return 0
    fi
    
    # Create a backup
    if [ "$BACKUP_CONFIG_FILES" = "true" ]; then
        local backup_file="${fish_config}.bak.$(date +%Y%m%d%H%M%S)"
        cp "$fish_config" "$backup_file"
        utils_show_status "info" "Created backup at ${backup_file}"
    fi
    
    # Add hooks to config.fish
    cat >> "$fish_config" << 'EOL'

# PHPSwitch auto-switching hooks
function phpswitch_auto_detect_project --on-variable PWD
    if test "$AUTO_SWITCH_PHP_VERSION" = "true"
        # Use a simple cache to avoid checking too frequently
        set -l dir_hash (echo $PWD | md5sum 2>/dev/null || md5 -q $PWD 2>/dev/null)
        set -l dir_hash (echo $dir_hash | string split ' ' | head -n1)
        set -l cache_dir "$HOME/.cache/phpswitch"
        set -l cache_file "$cache_dir/dir_$dir_hash.cache"
        
        # Ensure cache directory exists
        mkdir -p "$cache_dir" 2>/dev/null
        
        # Check if we should process this directory
        if test ! -f "$cache_file"; or test (cat "$cache_file" | string length) -eq 0
            phpswitch --auto-mode > /dev/null 2>&1
            # Cache the result
            echo "cached" > "$cache_file"
        end
    end
end
EOL

    utils_show_status "success" "Installed auto-switching hooks in config.fish"
}

# Function to clear the directory cache
function auto_clear_directory_cache {
    local cache_dir="$HOME/.cache/phpswitch"
    
    if [ -d "$cache_dir" ]; then
        utils_show_status "info" "Clearing directory cache for auto-switching..."
        
        # Only remove the directory cache files, not all cache files
        find "$cache_dir" -name "dir_*.cache" -delete
        
        utils_show_status "success" "Directory cache cleared"
    else
        utils_show_status "info" "No directory cache found at $cache_dir"
    fi
}